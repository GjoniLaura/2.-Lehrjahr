@page "/input"
@using TimeTable.Data
@using TimeTable.Modules
@using TimeTable.DatabaseConnection
@inject NavigationManager NavigationManager

<PageTitle>Input</PageTitle>

<div class="container mt-4">
    <h1 class="mb-3 text-center">Insert Data</h1>

    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="form-group">
                <select class="form-control" @bind="SelectedOption">
                    <option value="Select">Press here to select what you want to add to the Database.</option>
                    <option value="Education">Education</option>
                    <option value="Student">Student</option>
                    <option value="Subject">Subject</option>
                    <option value="Teacher">Teacher</option>
                    <option value="ClockTime">ClockTime</option>
                    <option value="Room">Room</option>
                </select>
            </div>
        </div>
    </div>

    @if (SelectedOption == "Education")
    {
        <div>
            <h4>Education Details</h4>
            <label for="Name">Name:</label>
            <input @bind="Name" placeholder="" />
            <br />
            <br />
            <div>
                @if (ShowSubjectDropdown)
                {
                        <label for="subjectDropdown">Subject:</label>
                    <select id="subjectDropdown" @bind="SelectedSubjectId">
                        <option value="">Select Subject</option>
                        @foreach (var subject in AllSubjects.GroupBy(s => s._designation).Select(g => g.First()))
                        {
                        <option value="@subject.Id">@subject._designation</option>
                        }
                    </select>

                }
                <label for="numberoflessons">Number of Lessons:</label>
                <input @bind="NumberOfLessons" type="number" placeholder="Number of Lessons" />
                <button @onclick="AddSubject">Add Subject</button>
            </div>
            <br />
            <br />
            @if (Subjects.Any())
            {
                @foreach (var subject in Subjects)
                {
                            <div>
                                <input @bind="subject._designation" placeholder="Subject" />
                            </div>
                }
            }
            <br />
            <button @onclick="SubmitEducation">Submit</button>
        </div>
    }


    else if (SelectedOption == "ClockTime")
    {
                <div class="card mt-3">
                    <div class="card-body">
                        <h4 class="card-title">ClockTime Details</h4>
                        <div class="form-group">
                            <input class="form-control" @bind="ClockTimeDescription" placeholder="ClockTime Description" />
                        </div>
                        <div class="form-group">
                            <label>Select Day Of Week</label>
                            <select class="form-control" @bind="SelectedWeekDayClock">
                                <option value="">Select Day Of Week</option>
                                <option value="Monday">Monday</option>
                                <option value="Tuesday">Tuesday</option>
                                <option value="Wednesday">Wednesday</option>
                                <option value="Thursday">Thursday</option>
                                <option value="Friday">Friday</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Start Time</label>
                            <input class="form-control" @bind="ClockTimeStartTime" placeholder="Start Time" />
                        </div>
                        <div class="form-group">
                            <label>End Time</label>
                            <input class="form-control" @bind="ClockTimeEndTime" placeholder="End Time" />
                        </div>
                        <button class="btn btn-success" @onclick="SubmitClockTime">Submit ClockTime</button>
                    </div>
                </div>
    }
    else if (SelectedOption == "Room")
    {
            <div class="card mt-3">
                <div class="card-body">
                    <h4 class="card-title">Room Details</h4>

                    <div class="form-group">
                        <label for="Designation">Designation:</label>
                        <input class="form-control" @bind="RoomDesignation" id="Designation" placeholder="Enter Designation" />
                    </div>

                    <div class="form-group">
                        <label for="numberOfSeats">Number of Seats:</label>
                        <input class="form-control" id="numberOfSeats" @bind="NumberOfSeats" type="number" placeholder="Enter Number of Seats" />
                    </div>

                    <button class="btn btn-success mt-3" @onclick="SubmitRoom">Submit Room</button>
                </div>
            </div>
    }
    else if (SelectedOption == "Student")
    {
        <div>
            <h4>Student Details</h4>
            <label for="firstName">First Name:</label>
            <input id="firstName" @bind="FirstName" placeholder="" />
            <br />

            <label for="lastName">Last Name:</label>
            <input id="lastName" @bind="LastName" placeholder="" />
            <br />

            <label for="isAvailable">Available for the following Semester:</label>
            <input id="isAvailable" @bind="IsAvailable" type="checkbox" />
            <br />

            @if (AlleEducation != null && AlleEducation.Any())
            {
            <label for="educationDropdown">Education:</label>
            <select id="educationDropdown" @bind="SelectedEducationId">
                <option value="">Select Education</option>
                    @foreach (var edu in AlleEducation.GroupBy(e => e.Name).Select(g => g.First()))
                    {
                        <option value="@edu.Id">@edu.Name</option>
                    }
            </select>
            }
            else
            {
            <p>Loading educations...</p>
            }
            <button @onclick="SubmitStudent">Submit Student</button>
        </div>
    }
    else if (SelectedOption == "Teacher")
    {
        <div>
            <h4>Teacher Details</h4>
            <label for="firstName">First Name:</label>
            <input id="firstName" @bind="FirstName" placeholder="" />
            <br />

            <label for="lastName">Last Name:</label>
            <input id="lastName" @bind="LastName" placeholder="" />
            <br />

            <div>
                @if (ShowSubjectDropdown)
                {
                            <label for="subjectDropdown">Subject:</label>
                                    <select id="subjectDropdown" @bind="SelectedSubjectId">
                                        <option value="">Select Subject</option>
                        @foreach (var subject in AllSubjects.DistinctBy(s => s._designation))
                        {
                    <option value="@subject.Id">@subject._designation</option>
                        }
                                </select>
                }
                else
                {
                    <input @bind="SelectedSubject" placeholder="Subject" />
                }
                <button @onclick="AddSubject">Add Subject</button>
            </div>
            <br />
            <br />
            @if (Subjects.Any())
            {
                @foreach (var subject in Subjects)
                {
                    <div>
                        <input @bind="subject._designation" placeholder="Subject" />
                    </div>
                }
            }
            <br />

            <label for="numberOfWorkDays">Number of Work Days:</label>
            <input id="numberOfWorkDays" @bind="NumberOfWorkDays" type="number" placeholder="Number of Work Days" />
            <br />

            <div>
                @if (ShowClockTimeForm){
                @if (ShowStartTimeDropdown)
                {
                    <label for="startDropdown">StartTime: </label>
                    <select id="startDropdown" @bind="SelectedStartTime">
                        <option value="Select">Select StartTime</option>
                        @foreach (var startTime in uniqueStartTimes)
                        {
                            <option value="@startTime">@startTime</option>
                        }
                                    </select>
                }
                else
                {
                    <input @bind="SelectedStartTime" placeholder="Start" />
                }
                @if (ShowEndTimeDropdown)
                {
                    <label for="endDropdown">EndTime: </label>
                    <select id="EndDropdown" @bind="SelectedEndTime">
                        <option value="Select">Select EndTime</option>
                            @foreach (var Endtime in uniqueEndTimes)
                        {
                            <option value="@Endtime">@Endtime</option>
                        }
                    </select>
                }
                else
                {
                    <input @bind="SelectedEndTime" placeholder="End" />
                }
                <label for="weekdayDropdown">Day Of Week: </label>
                <select @bind="SelectedWeekDay">
                    <option value="Select">Select Day Of Week</option>
                    <option value="Monday">Monday</option>
                    <option value="Tuesday">Tuesday</option>
                    <option value="Wednesday">Wednesday</option>
                    <option value="Thursday">Thursday</option>
                    <option value="Friday">Friday</option>
                </select>
                }
                <button @onclick="AddClockTime">Add Unavailabel Time</button>
                @if (AddedClockTimes.Any())
                {
                    <h4>Added Unavailabel Times</h4>
                    @foreach (var clockTime in AddedClockTimes)
                    {
                        <div>
                            <span>Start Time: @clockTime.StartTime</span>
                            <span>End Time: @clockTime.EndTime</span>
                        </div>
                    }
                }
            </div>

            <button @onclick="SubmitTeacher">Submit Teacher</button>
        </div>
    }
    else if (SelectedOption == "Subject")
    {
        <div>
            <h4>Subject Details</h4>
            <label for="designation">Designation:</label>
            <input id="designation" @bind="Designation" placeholder="" />
            <br />

            <label for="description">Description:</label>
            <input id="description" @bind="Description" placeholder="" />
            <br />

            <label for="premises">Premises:</label>
            <input @bind="Premises" placeholder="" />
            <br />

            <button @onclick="SubmitSubject">Submit Subject</button>
        </div>
    }
</div>

@code {
    private string SelectedOption { get; set; } = "Select";
    private string Name { get; set; }
    private string SelectedWeekDay { get; set; }
    private Subject SelectedSubject { get; set; }
    private string SelectedTeacherfirstname { get; set; }
    private string SelectedTeacherlastname { get; set; }
    private string SelectedStartTime { get; set; }
    private string SelectedEndTime { get; set; }
    private int NumberOfLessons { get; set; }
    private bool ShowClockTimeForm { get; set; } = false;
    private bool ShowSubjectDropdown { get; set; } = true;
    private bool ShowTeacherDropdown { get; set; } = true;
    private bool ShowStartTimeDropdown { get; set; } = true;
    private bool ShowEndTimeDropdown { get; set; } = true;
    private bool ShowWeekDayDropdown { get; set; } = true;
    private string ClockTimeId { get; set; }
    private string ClockTimeDescription { get; set; }
    private DayOfWeek ClockTimeDayOfWeek { get; set; }
    private TimeSpan ClockTimeStartTime { get; set; }
    private TimeSpan ClockTimeEndTime { get; set; }
    private string FirstName { get; set; }
    private string LastName { get; set; }
    private bool IsAvailable { get; set; }
    private string Education { get; set; }
    private string Teacher { get; set; }
    private int EducationSemester { get; set; }
    private string Class { get; set; }
    private int? SelectedEducationId { get; set; }

    private string Subject { get; set; }
    private bool Teached { get; set; }
    private int NumberOfWorkDays { get; set; }
    private string ClockTime { get; set; }

    private string Designation { get; set; }
    private string Description { get; set; }
    private string Premises { get; set; }

    private int RoomId { get; set; }
    private string RoomDesignation { get; set; }
    private int NumberOfSeats { get; set; }
    private DayOfWeek SelectedWeekDayClock { get; set; }

    private ClockTimes clocktimetemp { get; set; }
    private List<ClockTimes> AddedClockTimes { get; set; } = new List<ClockTimes>();
    private List<TimeSpan> uniqueStartTimes { get; set; }
    private List<TimeSpan> uniqueEndTimes { get; set; }


    List<Subject> Subjects { get; set; } = new List<Subject>();
    private List<TeacherDetails> Teachers { get; set; } = new List<TeacherDetails>();

    List<Subject> AllSubjects = new List<Subject>();
    List<Education> AlleEducation = new List<Education>();




    private class SubjectDetails
    {
        public string Name { get; set; }
        public int NumberOfLessons { get; set; }
    }

    private class TeacherDetails
    {
        public string _firstname { get; set; }
        public string _lastname { get; set; }
    }


    private int? SelectedSubjectId { get; set; }

    private void AddSubject()
    {
        if (SelectedSubjectId == null)
        {
            ShowSubjectDropdown = false;
        }
        else
        {
            ShowSubjectDropdown = true;
            var existingSubject = AllSubjects.FirstOrDefault(s => s.Id == SelectedSubjectId);
            if (existingSubject != null && !Subjects.Any(s => s.Id == existingSubject.Id))
            {
                Subjects.Add(existingSubject);
            }
        }
        SelectedSubjectId = null;
        NumberOfLessons = 0;
        AllSubjects = GetSubjectsFromDatabase();
    }


    private void AddTeacher()
    {
        if (SelectedTeacherfirstname == "Select" & SelectedTeacherlastname == "Select")
        {
            ShowTeacherDropdown = false;
        }
        else
        {
            ShowTeacherDropdown = true;

            var existingTeacherfirstname = Teachers.FirstOrDefault(f => f._firstname == SelectedTeacherfirstname);
            var existingTeacherlastname = Teachers.FirstOrDefault(l => l._lastname == SelectedTeacherlastname);

            if (existingTeacherfirstname == null & existingTeacherlastname == null)
            {
                Teachers.Add(new TeacherDetails { _firstname = SelectedTeacherfirstname, _lastname = SelectedTeacherlastname });
            }
        }

        SelectedTeacherfirstname = "Select";
        SelectedTeacherlastname = "Select";
    }

    private void AddClockTime()
    {
        if (SelectedStartTime == "Select")
        {
            ShowStartTimeDropdown = false;
        }
        else
        {
            ShowStartTimeDropdown = true;

        }

        if (SelectedEndTime == "Select")
        {
            ShowEndTimeDropdown = false;
        }
        else
        {
            ShowEndTimeDropdown = true;
        }
        if (SelectedWeekDay == "Select")
        {
            ShowWeekDayDropdown = false;
        }
        else
        {
            ShowWeekDayDropdown = true;
        }

        if (SelectedStartTime != "Select" && SelectedEndTime != "Select" && SelectedWeekDay != "Select")
        {
            TimeSpan parsedStartTime;
            TimeSpan parsedEndTime;
            bool isStartTimeValid = TimeSpan.TryParse(SelectedStartTime, out parsedStartTime);
            bool isEndTimeValid = TimeSpan.TryParse(SelectedEndTime, out parsedEndTime);

            DayOfWeek parsedWeekDay;
            bool isWeekDayValid = Enum.TryParse(SelectedWeekDay, out parsedWeekDay);

            if (isStartTimeValid && isEndTimeValid && isWeekDayValid)
            {
                var newClockTime = new ClockTimes
                    {
                        Bezeichnung = "TeacherTime",
                        StartTime = parsedStartTime,
                        EndTime = parsedEndTime,
                        DayOfWeek = parsedWeekDay
                    };

                AddedClockTimes.Add(newClockTime);
            }
        }
        SelectedStartTime = "Select";
        SelectedEndTime = "Select";
        SelectedWeekDay = "Select";
        ShowClockTimeForm = true;

    }


    private List<Subject> GetSubjectsFromDatabase()
    {
        return SubjectDatabaseConnection.getSubject();
    }

    private List<SubjectDetails> SubjectsList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SubjectsList = GetSubjectsFromDatabase()
            .Select(subject => new SubjectDetails { Name = subject._designation, NumberOfLessons = 0 })
            .ToList();

        AllClockTimeList = GetClockTimesFromDatabase()
        .Select(clocktime => new ClockTimes { StartTime = clocktime.StartTime, EndTime = clocktime.EndTime })
        .ToList();
        uniqueStartTimes = AllClockTimeList.Select(start => start.StartTime).Distinct().ToList();
        uniqueEndTimes = AllClockTimeList.Select(start => start.EndTime).Distinct().ToList();


        AllSubjects = GetSubjectsFromDatabase();
        AlleEducation = await EducationDatabaseConnection.getEducation();
    }

    private List<ClockTimes> GetClockTimesFromDatabase()
    {
        return ClockTimeDatabaseConnection.getClockTimes();
    }

    private List<ClockTimes> AllClockTimeList { get; set; }



    private Student student = new Student(); 
    Education education = new Education();
    List<Teacher> teachers = new List<Teacher>();
    List<Subject> subjects = new List<Subject>(); 
    List<ClockTimes> UnavailableTimes = new List<ClockTimes>();


    private void SubmitSubject()
    {
        SubjectDatabaseConnection.setSubject(Designation, Description, Premises);
        ResetFields();
    }

    private void SubmitTeacher()
    {
        TeacherDatabaseConnection.setTeacher(FirstName, LastName, IsAvailable, Subjects, Teached, NumberOfWorkDays, AddedClockTimes);
        ResetFields();
    }

    private void SubmitStudent()
    {
        var selectedEducation = AlleEducation.FirstOrDefault(e => e.Id == SelectedEducationId);
        NumberOfLessons = selectedEducation.AnzLessons;
        EducationSemester = 1; //for algorithm
        Class = "default"; //for algorithm 

        StudentDatabaseConnection.setStudent(FirstName, LastName, IsAvailable, selectedEducation, teachers, NumberOfLessons, EducationSemester, Class);
        ResetFields();
    }
    private async void SubmitEducation()
    {
        EducationDatabaseConnection.setEducation(Name, Subjects, NumberOfLessons);
        ResetFields();
    }

    private void SubmitClockTime()
    {
        ClockTimeDatabaseConnection.setClockTime(ClockTimeStartTime, ClockTimeEndTime, SelectedWeekDayClock, ClockTimeDescription);
        ResetFields();
    }
    private void SubmitRoom()
    {
        RoomDatabaseConnection.setRoom(RoomDesignation, NumberOfSeats);
        ResetFields();
    }








    private async void ResetFields()
    {
        Name = "";
        SelectedWeekDay = "";
        SelectedSubject = null;
        SelectedTeacherfirstname = "";
        SelectedTeacherlastname = "";
        SelectedStartTime = "";
        SelectedEndTime = "";
        NumberOfLessons = 0;
        ShowClockTimeForm = false;
        ShowSubjectDropdown = true;
        ShowTeacherDropdown = true;
        ShowStartTimeDropdown = true;
        ShowEndTimeDropdown = true;
        ShowWeekDayDropdown = true;
        ClockTimeId = "";
        ClockTimeDescription = "";
        ClockTimeDayOfWeek = default;
        ClockTimeStartTime = default;
        ClockTimeEndTime = default;
        FirstName = "";
        LastName = "";
        IsAvailable = false;
        Education = "";
        Teacher = "";
        EducationSemester = 0;
        Class = "";
        SelectedEducationId = null;
        Subject = "";
        Teached = false;
        NumberOfWorkDays = 0;
        ClockTime = "";
        Designation = "";
        Description = "";
        Premises = "";
        RoomId = 0;
        RoomDesignation = "";
        NumberOfSeats = 0;
        clocktimetemp = null;
        AddedClockTimes.Clear();
        uniqueStartTimes = null;
        uniqueEndTimes = null;
        Subjects.Clear();
        Teachers.Clear();
        AllSubjects.Clear();
        AllClockTimeList.Clear();
        SelectedWeekDayClock = default;

        student = new Student();
        education = new Education();
        teachers.Clear();
        subjects.Clear();
        UnavailableTimes.Clear();

        SubjectsList = GetSubjectsFromDatabase()
    .Select(subject => new SubjectDetails { Name = subject._designation, NumberOfLessons = 0 })
    .ToList();

        AllClockTimeList = GetClockTimesFromDatabase()
        .Select(clocktime => new ClockTimes { StartTime = clocktime.StartTime, EndTime = clocktime.EndTime })
        .ToList();
        uniqueStartTimes = AllClockTimeList.Select(start => start.StartTime).Distinct().ToList();
        uniqueEndTimes = AllClockTimeList.Select(start => start.EndTime).Distinct().ToList();


        AllSubjects = GetSubjectsFromDatabase();
    }

}


