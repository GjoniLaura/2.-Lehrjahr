@page "/Output"
@using TimeTable.Data
@using TimeTable.Modules
@using TimeTable.DatabaseConnection
@using TimeTable.Components

<PageTitle>Custom Output Page</PageTitle>

<div class="container mt-4">
    <h1 class="display-4 text-center mb-4">Übersicht</h1>

    <div class="btn-group d-flex justify-content-center" role="group" aria-label="Basic radio toggle button group">
        <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked @onclick="() => ChangeSelection(SelectionType.Teachers)">
        <label class="btn btn-outline-primary" for="btnradio1">Teachers</label>

        <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" @onclick="() => ChangeSelection(SelectionType.Students)">
        <label class="btn btn-outline-primary" for="btnradio2">Students</label>

        <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off" @onclick="() => ChangeSelection(SelectionType.Educations)">
        <label class="btn btn-outline-primary" for="btnradio3">Educations</label>

         <input type="radio" class="btn-check" name="btnradio" id="btnradio5" autocomplete="off" @onclick="() => ChangeSelection(SelectionType.Subjects)">
        <label class="btn btn-outline-primary" for="btnradio5">Subjects</label>

        <input type="radio" class="btn-check" name="btnradio" id="btnradio4" autocomplete="off" @onclick="() => ChangeSelection(SelectionType.Rooms)">
        <label class="btn btn-outline-primary" for="btnradio4">Rooms</label>
    </div>

    <div class="mt-4 d-flex flex-row flex-wrap">
        @if (selectedType == SelectionType.Teachers)
        {
            @if (Teachers.Count == 0)
            {
               <h6>No teachers have been saved in the database yet.</h6>
            }
            else
            {
                @foreach (Teacher t in Teachers)
                {
                    <TeacherForm teacher="t"></TeacherForm>
                }
            }
        }
        else if (selectedType == SelectionType.Students)
        {
            @if(Students.Count == 0)
            {
                <h6>There are currently no students saved.</h6>
            }
            else
            {
                @foreach(Student s in Students)
                {
                    <StudentForm student="s"></StudentForm>
                }
            }
        }
        else if (selectedType == SelectionType.Educations)
        {
            @if(Educations.Count == 0)
            {
                <h6>There are currently no Educations saved.</h6>
            }
            else
            {
                @foreach(Education e in Educations)
                {
                    <EducationForm education="e"></EducationForm>
                }
            }
        } 
        else if (selectedType == SelectionType.Rooms)
        {
            @if (Rooms.Count == 0)
            {
                <h6>There are currently no rooms saved.</h6>
            }
            else
            {
                @foreach (Room r in Rooms)
                {
                    <RoomsForm room="r"></RoomsForm>
                }
            }
        }
        else if (selectedType == SelectionType.Subjects)
        {
            @if (Subjects.Count == 0)
            {
                <h6>There are currently no subjects saved.</h6>
            }
            else
            {
                @foreach (Subject s in Subjects)
                {
                    <SubjectsForm subject="s"></SubjectsForm>
                }
            }
        }
    </div>
</div>

@code {
    public List<Teacher> Teachers = new List<Teacher>();
    public List<Student> Students = new List<Student>();
    public List<Education> Educations = new List<Education>();
    public List<Room> Rooms = new List<Room>();
    public List<Subject> Subjects = new List<Subject>();

    protected override async Task OnInitializedAsync()
    {
        Teachers = await TeacherDatabaseConnection.getTeacher();
        Students = await StudentDatabaseConnection.getStudent();
        Educations = await EducationDatabaseConnection.getEducation();
        Rooms = RoomDatabaseConnection.getRoom();
        Subjects = SubjectDatabaseConnection.getSubject();
    }

    private enum SelectionType
    {
        Teachers,
        Students,
        Educations,
        Rooms,
        Subjects
    }

    private SelectionType selectedType = SelectionType.Teachers;

    private void ChangeSelection(SelectionType type)
    {
        selectedType = type;
    }
}
