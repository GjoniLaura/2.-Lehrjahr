// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTable.DatabaseConnection;

#nullable disable

namespace TimeTable.Migrations
{
    [DbContext(typeof(TimeTableContext))]
    [Migration("20240118214533_initial-migration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ClockTimesTeacher", b =>
                {
                    b.Property<int>("UnavailableTimeSlotsId")
                        .HasColumnType("int");

                    b.Property<int>("teachersId")
                        .HasColumnType("int");

                    b.HasKey("UnavailableTimeSlotsId", "teachersId");

                    b.HasIndex("teachersId");

                    b.ToTable("TeacherUnavailabel", (string)null);
                });

            modelBuilder.Entity("EducationSubject", b =>
                {
                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.Property<int>("educationsId")
                        .HasColumnType("int");

                    b.HasKey("SubjectsId", "educationsId");

                    b.HasIndex("educationsId");

                    b.ToTable("EducationSubjects", (string)null);
                });

            modelBuilder.Entity("StudentTeacher", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("StudentsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("StudentTeachers", (string)null);
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.Property<int>("TeachedSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("teachersId")
                        .HasColumnType("int");

                    b.HasKey("TeachedSubjectId", "teachersId");

                    b.HasIndex("teachersId");

                    b.ToTable("TeacherSubjects", (string)null);
                });

            modelBuilder.Entity("TimeTable.Modules.ClockTimes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.ToTable("time");
                });

            modelBuilder.Entity("TimeTable.Modules.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnzLessons")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("education");
                });

            modelBuilder.Entity("TimeTable.Modules.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("person");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TimeTable.Modules.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("room");
                });

            modelBuilder.Entity("TimeTable.Modules.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("_designation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("_premises")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("TimeTable.Modules.Student", b =>
                {
                    b.HasBaseType("TimeTable.Modules.Person");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<int>("EducationSemester")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfLessons")
                        .HasColumnType("int");

                    b.HasIndex("EducationId");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("TimeTable.Modules.Teacher", b =>
                {
                    b.HasBaseType("TimeTable.Modules.Person");

                    b.Property<int>("NumberOfWorkDays")
                        .HasColumnType("int");

                    b.Property<bool>("Teached")
                        .HasColumnType("tinyint(1)");

                    b.ToTable("teacher", (string)null);
                });

            modelBuilder.Entity("ClockTimesTeacher", b =>
                {
                    b.HasOne("TimeTable.Modules.ClockTimes", null)
                        .WithMany()
                        .HasForeignKey("UnavailableTimeSlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTable.Modules.Teacher", null)
                        .WithMany()
                        .HasForeignKey("teachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationSubject", b =>
                {
                    b.HasOne("TimeTable.Modules.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTable.Modules.Education", null)
                        .WithMany()
                        .HasForeignKey("educationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentTeacher", b =>
                {
                    b.HasOne("TimeTable.Modules.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTable.Modules.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.HasOne("TimeTable.Modules.Subject", null)
                        .WithMany()
                        .HasForeignKey("TeachedSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTable.Modules.Teacher", null)
                        .WithMany()
                        .HasForeignKey("teachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeTable.Modules.Student", b =>
                {
                    b.HasOne("TimeTable.Modules.Education", "Education")
                        .WithMany("Students")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTable.Modules.Person", "Person")
                        .WithOne()
                        .HasForeignKey("TimeTable.Modules.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TimeTable.Modules.Teacher", b =>
                {
                    b.HasOne("TimeTable.Modules.Person", "Person")
                        .WithOne()
                        .HasForeignKey("TimeTable.Modules.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TimeTable.Modules.Education", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
