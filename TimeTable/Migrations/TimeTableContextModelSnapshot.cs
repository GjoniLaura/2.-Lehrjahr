// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTable.DatabaseConnection;

#nullable disable

namespace TimeTable.Migrations
{
    [DbContext(typeof(TimeTableContext))]
    partial class TimeTableContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TimeTable.ClockTimes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("time");
                });

            modelBuilder.Entity("TimeTable.Education", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AnzLessons")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("education");
                });

            modelBuilder.Entity("TimeTable.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TimeTable.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EducationId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("_designation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("_premises")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("TeacherId");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("TimeTable.Student", b =>
                {
                    b.HasBaseType("TimeTable.Person");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EducationId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EducationSemester")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfLessons")
                        .HasColumnType("int");

                    b.HasIndex("EducationId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("TimeTable.Teacher", b =>
                {
                    b.HasBaseType("TimeTable.Person");

                    b.Property<int>("NumberOfWorkDays")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<bool>("Teached")
                        .HasColumnType("tinyint(1)");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("TimeTable.Subject", b =>
                {
                    b.HasOne("TimeTable.Education", null)
                        .WithMany("Subjects")
                        .HasForeignKey("EducationId");

                    b.HasOne("TimeTable.Teacher", null)
                        .WithMany("TeachedSubject")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("TimeTable.Student", b =>
                {
                    b.HasOne("TimeTable.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");
                });

            modelBuilder.Entity("TimeTable.Teacher", b =>
                {
                    b.HasOne("TimeTable.Student", null)
                        .WithMany("Teachers")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("TimeTable.Education", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("TimeTable.Student", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("TimeTable.Teacher", b =>
                {
                    b.Navigation("TeachedSubject");
                });
#pragma warning restore 612, 618
        }
    }
}
