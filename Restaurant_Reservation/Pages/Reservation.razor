@page "/reservation/{Id:int}"
@using Restaurant_Reservation.Klassen
@using Restaurant_Reservation.Service
@using Restaurant_Reservation.Datenbank
@inject ReservationService ReservationService

<PageTitle>Reservation</PageTitle>

<div class="container mt-5">
    <h1 class="mb-4">Reservation for @Restaurant?.Name</h1>

    @if (Restaurant != null)
    {
        <div class="card mb-4">
            <div class="card-body">
                <p>
                    <strong>Location:</strong><br />
                    @Restaurant.Location.Street @Restaurant.Location.HouseNumber,<br />
                    @Restaurant.Location.City, @Restaurant.Location.PostalCode,<br />
                    @Restaurant.Location.Country
                </p>

                <p>
                    <strong>@Restaurant.Name</strong><br />
                    <strong>Opening Hours:</strong><br />
                    <ul>
                        @foreach (var day in daysOfWeek)
                        {
                            <li>@day: @Restaurant.OpeningTime - @Restaurant.ClosingTime</li>
                        }
                    </ul>
                </p>

                <p>
                    <strong>Restaurant information:</strong>
                    @Restaurant.Description,<br />
                    @Restaurant.Cuisine
                </p>
            </div>
        </div>

        <h2 class="mb-4">Reservation Form</h2>

        <form class="reservation-form" @onsubmit="HandleSubmit">
            <div class="mb-3">
                <label for="firstName" class="form-label">First Name:</label>
                <input type="text" id="firstName" @bind="FirstName" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="lastName" class="form-label">Last Name:</label>
                <input type="text" id="lastName" @bind="LastName" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <input type="email" id="email" @bind="Email" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="phone" class="form-label">Phone:</label>
                <input type="tel" id="phone" @bind="Phone" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="guests" class="form-label">Number of Guests:</label>
                <input type="number" id="guests" value="@NumberOfGuests" @onchange="OnGuestsChanged" class="form-control" min="1" required>
            </div>
            <div class="mb-3">
                <label for="date" class="form-label">Date:</label>
                <InputDate id="date" @bind-Value="ReservationDate" @onchange="OnDateChanged" class="form-control" required />
            </div>
            <div class="mb-3">
                <label for="time" class="form-label">Time:</label>
                <InputSelect id="time" @bind-Value="ReservationTime" class="form-select">
                    @foreach (var time in availableTimes)
                    {
                        <option value="@time">@time</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="notes" class="form-label">Additional Notes:</label>
                <textarea id="notes" @bind="Notes" class="form-control" rows="4"></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Submit Reservation</button>
        </form>
    }
    else
    {
        <p>Loading restaurant information...</p>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Restaurant Restaurant { get; set; }
    private string FirstName { get; set; }
    private string LastName { get; set; }
    private string Email { get; set; }
    private string Phone { get; set; }
    private int NumberOfGuests { get; set; } = 1; // Default value to prevent 0 guests
    private DateTime ReservationDate { get; set; } = DateTime.Today;
    private string ReservationTime { get; set; }
    private string Notes { get; set; }
    private List<string> availableTimes = new List<string>();
    private string[] daysOfWeek = new string[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };

    protected override async Task OnInitializedAsync()
    {
        var restaurants = await DatabaseHelper.GetAllRestaurants();
        Restaurant = restaurants.FirstOrDefault(r => r.Id == Id);

        if (Restaurant != null)
        {
            await UpdateAvailableTimes();
        }
    }

    private async Task UpdateAvailableTimes()
    {
        if (Restaurant == null)
        {
            Console.WriteLine("Error: No restaurant found.");
            return;
        }

        if (ReservationDate == default)
        {
            Console.WriteLine("Error: Invalid reservation date.");
            return;
        }

        Console.WriteLine($"Updating available times for {NumberOfGuests} guests on {ReservationDate}");
        try
        {
            var times = await ReservationService.GetAvailableTimesAsync(Restaurant, ReservationDate, NumberOfGuests);
            availableTimes = times.Select(t => t.ToString("HH:mm")).ToList();

            if (availableTimes.Any())
            {
                Console.WriteLine($"Available times: {string.Join(", ", availableTimes)}");
            }
            else
            {
                Console.WriteLine("No available times found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to fetch available times: {ex.Message}");
        }

        StateHasChanged(); // Ensure the UI is updated
    }


    private async Task HandleSubmit()
    {
        var user = new User(FirstName, LastName, NumberOfGuests, Phone, Notes);
        var dateTimeString = $"{ReservationDate:yyyy-MM-dd} {ReservationTime}";
        if (DateTime.TryParse(dateTimeString, out var reservationDateTime))
        {
            var result = await ReservationService.MakeReservationAsync(Restaurant, user, reservationDateTime, NumberOfGuests);
            // Handle reservation result (e.g., show confirmation message)
        }
    }

    private async Task OnGuestsChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int guests))
        {
            NumberOfGuests = guests;
            await UpdateAvailableTimes();
        }
    }

    private async Task OnDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime date))
        {
            ReservationDate = date;
            await UpdateAvailableTimes();
        }
    }
}
