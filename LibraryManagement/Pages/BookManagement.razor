@page "/books"
@using LibraryManagement.Models
@using LibraryManagement.Interfaces
@inject IBookService BookService

<h3>Book Management</h3>

<div class="form-container">
    <input class="form-control" @bind="search" @bind:event="oninput" placeholder="Search by Title or Author" />
    <button class="btn btn-secondary" @onclick="@(() => { search = string.Empty; SearchBooks(); })">Reset Search</button>
    <button class="btn btn-primary" @onclick="ShowAddBookForm">Add Book</button>
</div>

@if (showAddBookForm)
{
    <EditForm Model="newBook" OnValidSubmit="HandleValidSubmit" class="mt-3">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="mb-3">
            <label class="form-label">Title:</label>
            <InputText class="form-control" @bind-Value="newBook.Title" />
        </div>
        <div class="mb-3">
            <label class="form-label">Author:</label>
            <InputText class="form-control" @bind-Value="newBook.Author" />
        </div>
        <div class="mb-3">
            <label class="form-label">Year Published:</label>
            <InputDate class="form-control" @bind-Value="newBook.YearPublished" />
        </div>
        <div class="mb-3">
            <label class="form-label">Genre:</label>
            <InputText class="form-control" @bind-Value="newBook.Genre" />
        </div>
        <div class="mb-3">
            <label class="form-label">Number of Pages:</label>
            <InputNumber class="form-control" @bind-Value="newBook.NumberOfPages" />
        </div>
        <button type="submit" class="btn btn-success">Add Book</button>
        <button type="button" class="btn btn-danger" @onclick="CancelAddBook">Cancel</button>
    </EditForm>
}

@if (bookList is not null)
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Year Published</th>
                <th>Genre</th>
                <th>Number of Pages</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in bookList)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.YearPublished.ToString("yyyy-MM-dd")</td>
                    <td>@book.Genre</td>
                    <td>@book.NumberOfPages</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveBook(book.BookId)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>Loading books...</em></p>
}

@code {
    private string search = "";
    private List<Book> bookList = new();
    private Book newBook = new Book();
    private bool showAddBookForm = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        try
        {
            bookList = await BookService.GetBooksAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading books: {ex.Message}");
        }
    }

    private void ShowAddBookForm()
    {
        showAddBookForm = true;
        newBook = new Book
            {
                YearPublished = DateTime.Today
            };
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await BookService.AddBookAsync(newBook);
            await LoadBooks();
            showAddBookForm = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding book: {ex.Message}");
        }
    }

    private void CancelAddBook()
    {
        showAddBookForm = false;
    }

    private async Task RemoveBook(int bookId)
    {
        try
        {
            await BookService.DeleteBookAsync(bookId);
            await LoadBooks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing book: {ex.Message}");
        }
    }

    private async Task SearchBooks()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(search))
            {
                await LoadBooks();
            }
            else
            {
                bookList = await BookService.SearchBooksAsync(search);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching books: {ex.Message}");
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        search = e.Value.ToString();
        SearchBooks();
    }
}

<style>
    .form-container {
        margin-bottom: 20px;
    }

    .form-label {
        font-weight: bold;
    }

    .form-control {
        margin-bottom: 10px;
    }

    .table th, .table td {
        vertical-align: middle;
    }

    .btn {
        margin-right: 5px;
    }

    .mt-2 {
        margin-top: 0.5rem;
    }

    .mt-3 {
        margin-top: 1rem;
    }
</style>
