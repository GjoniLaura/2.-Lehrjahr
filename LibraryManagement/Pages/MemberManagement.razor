@page "/members"
@using LibraryManagement.Models
@using LibraryManagement.Interfaces
@inject IMemberService MemberService

<h3>Member Management</h3>

<div class="form-container">
    <input class="form-control" @bind="search" @bind:event="oninput" placeholder="Search by Name" />
    <button class="btn btn-secondary" @onclick="@(() => { search = string.Empty; SearchMembers(); })">Reset Search</button>
    <button class="btn btn-primary" @onclick="ShowAddMemberForm">Add Member</button>
</div>

@if (showAddMemberForm)
{
    <EditForm Model="newMember" OnValidSubmit="HandleValidSubmit" class="mt-3">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="mb-3">
            <label class="form-label">First Name:</label>
            <InputText class="form-control" @bind-Value="newMember.FirstName" />
        </div>
        <div class="mb-3">
            <label class="form-label">Last Name:</label>
            <InputText class="form-control" @bind-Value="newMember.LastName" />
        </div>
        <div class="mb-3">
            <label class="form-label">Age:</label>
            <InputNumber class="form-control" @bind-Value="newMember.Age" />
        </div>
        <div class="mb-3">
            <label class="form-label">Email:</label>
            <InputText class="form-control" @bind-Value="newMember.Email" />
        </div>
        <div class="mb-3">
            <label class="form-label">Phone Number:</label>
            <InputText class="form-control" @bind-Value="newMember.PhoneNumber" />
        </div>
        <div class="mb-3">
            <label class="form-label">Registration Date:</label>
            <InputDate class="form-control" @bind-Value="newMember.Registration" />
        </div>
        <div class="mb-3">
            <label class="form-label">Membership Status:</label>
            <InputText class="form-control" @bind-Value="newMember.MembershipStatus" />
        </div>
        <div class="mb-3">
            <label class="form-label">Borrowed Books (comma separated book IDs):</label>
            <InputText class="form-control" @bind-Value="borrowedBooks" />
        </div>
        <div class="mb-3">
            <label class="form-label">Due Dates (comma separated dates):</label>
            <InputText class="form-control" @bind-Value="dueDates" />
        </div>
        <div class="mb-3">
            <label class="form-label">Membership Fee:</label>
            <InputNumber class="form-control" @bind-Value="newMember.MembershipFee" />
        </div>
        <button type="submit" class="btn btn-success">Add Member</button>
        <button type="button" class="btn btn-danger" @onclick="CancelAddMember">Cancel</button>
    </EditForm>
}

@if (membersList is not null)
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Member ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Registration Date</th>
                <th>Membership Status</th>
                <th>Membership Fee</th>
                <th>Borrowed Books</th>
                <th>Due Dates</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var member in membersList)
            {
                <tr>
                    <td>@member.MemberId</td>
                    <td>@member.FirstName @member.LastName</td>
                    <td>@member.Email</td>
                    <td>@member.PhoneNumber</td>
                    <td>@member.Registration.ToString("d")</td>
                    <td>@member.MembershipStatus</td>
                    <td>@member.MembershipFee</td>
                    <td>@string.Join(", ", member.BorrowedBooks)</td>
                    <td>
                        <ul>
                            @foreach (var dueDate in member.DueDates)
                            {
                                <li>@dueDate.ToString("d")</li>
                            }
                        </ul>
                    </td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveMember(member.MemberId)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>Loading members...</em></p>
}

@code {
    private string search = "";
    private List<Members> membersList = new();
    private Members newMember = new Members();
    private bool showAddMemberForm = false;
    private string borrowedBooks = "";
    private string dueDates = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMembers();
    }

    private async Task LoadMembers()
    {
        try
        {
            membersList = await MemberService.GetMembersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading members: {ex.Message}");
        }
    }

    private void ShowAddMemberForm()
    {
        showAddMemberForm = true;
        newMember = new Members { Registration = DateTime.Today };
        borrowedBooks = "";
        dueDates = "";
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            newMember.BorrowedBooks = borrowedBooks.Split(',').Select(int.Parse).ToList();
            newMember.DueDates = dueDates.Split(',').Select(DateTime.Parse).ToList();
            await MemberService.AddMemberAsync(newMember);
            await LoadMembers();
            showAddMemberForm = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding member: {ex.Message}");
        }
    }

    private void CancelAddMember()
    {
        showAddMemberForm = false;
    }

    private async Task RemoveMember(int memberId)
    {
        try
        {
            await MemberService.DeleteMemberAsync(memberId);
            await LoadMembers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing member: {ex.Message}");
        }
    }

    private async Task SearchMembers()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(search))
            {
                await LoadMembers();
            }
            else
            {
                membersList = await MemberService.SearchMembersAsync(search);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching members: {ex.Message}");
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        search = e.Value.ToString();
        SearchMembers();
    }
}

<style>
    .form-container {
        margin-bottom: 20px;
    }

    .form-label {
        font-weight: bold;
    }

    .form-control {
        margin-bottom: 10px;
    }

    .table th, .table td {
        vertical-align: middle;
    }

    .btn {
        margin-right: 5px;
    }

    .mt-2 {
        margin-top: 0.5rem;
    }

    .mt-3 {
        margin-top: 1rem;
    }
</style>
